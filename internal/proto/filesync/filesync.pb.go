// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.9
// 	protoc        v6.30.2
// source: filesync.proto

package filesync

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// A generic wrapper for messages in the stream
type SyncMessage struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Types that are valid to be assigned to Msg:
	//
	//	*SyncMessage_Hello
	//	*SyncMessage_Update
	//	*SyncMessage_Rename
	//	*SyncMessage_Remove
	//	*SyncMessage_Ack
	Msg           isSyncMessage_Msg `protobuf_oneof:"msg"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SyncMessage) Reset() {
	*x = SyncMessage{}
	mi := &file_filesync_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SyncMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SyncMessage) ProtoMessage() {}

func (x *SyncMessage) ProtoReflect() protoreflect.Message {
	mi := &file_filesync_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SyncMessage.ProtoReflect.Descriptor instead.
func (*SyncMessage) Descriptor() ([]byte, []int) {
	return file_filesync_proto_rawDescGZIP(), []int{0}
}

func (x *SyncMessage) GetMsg() isSyncMessage_Msg {
	if x != nil {
		return x.Msg
	}
	return nil
}

func (x *SyncMessage) GetHello() *ClientHello {
	if x != nil {
		if x, ok := x.Msg.(*SyncMessage_Hello); ok {
			return x.Hello
		}
	}
	return nil
}

func (x *SyncMessage) GetUpdate() *FileUpdate {
	if x != nil {
		if x, ok := x.Msg.(*SyncMessage_Update); ok {
			return x.Update
		}
	}
	return nil
}

func (x *SyncMessage) GetRename() *FileRename {
	if x != nil {
		if x, ok := x.Msg.(*SyncMessage_Rename); ok {
			return x.Rename
		}
	}
	return nil
}

func (x *SyncMessage) GetRemove() *FileRemove {
	if x != nil {
		if x, ok := x.Msg.(*SyncMessage_Remove); ok {
			return x.Remove
		}
	}
	return nil
}

func (x *SyncMessage) GetAck() *SyncAck {
	if x != nil {
		if x, ok := x.Msg.(*SyncMessage_Ack); ok {
			return x.Ack
		}
	}
	return nil
}

type isSyncMessage_Msg interface {
	isSyncMessage_Msg()
}

type SyncMessage_Hello struct {
	Hello *ClientHello `protobuf:"bytes,1,opt,name=hello,proto3,oneof"`
}

type SyncMessage_Update struct {
	Update *FileUpdate `protobuf:"bytes,2,opt,name=update,proto3,oneof"`
}

type SyncMessage_Rename struct {
	Rename *FileRename `protobuf:"bytes,3,opt,name=rename,proto3,oneof"`
}

type SyncMessage_Remove struct {
	Remove *FileRemove `protobuf:"bytes,4,opt,name=remove,proto3,oneof"`
}

type SyncMessage_Ack struct {
	Ack *SyncAck `protobuf:"bytes,5,opt,name=ack,proto3,oneof"`
}

func (*SyncMessage_Hello) isSyncMessage_Msg() {}

func (*SyncMessage_Update) isSyncMessage_Msg() {}

func (*SyncMessage_Rename) isSyncMessage_Msg() {}

func (*SyncMessage_Remove) isSyncMessage_Msg() {}

func (*SyncMessage_Ack) isSyncMessage_Msg() {}

// Sent by the client when it connects after authentication
type ClientHello struct {
	state           protoimpl.MessageState `protogen:"open.v1"`
	ClientId        string                 `protobuf:"bytes,1,opt,name=client_id,json=clientId,proto3" json:"client_id,omitempty"`                      // Unique ID for the client (client-side generation)
	SubscribedPaths []string               `protobuf:"bytes,2,rep,name=subscribed_paths,json=subscribedPaths,proto3" json:"subscribed_paths,omitempty"` // List of paths it wants to sync
	unknownFields   protoimpl.UnknownFields
	sizeCache       protoimpl.SizeCache
}

func (x *ClientHello) Reset() {
	*x = ClientHello{}
	mi := &file_filesync_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ClientHello) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ClientHello) ProtoMessage() {}

func (x *ClientHello) ProtoReflect() protoreflect.Message {
	mi := &file_filesync_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ClientHello.ProtoReflect.Descriptor instead.
func (*ClientHello) Descriptor() ([]byte, []int) {
	return file_filesync_proto_rawDescGZIP(), []int{1}
}

func (x *ClientHello) GetClientId() string {
	if x != nil {
		return x.ClientId
	}
	return ""
}

func (x *ClientHello) GetSubscribedPaths() []string {
	if x != nil {
		return x.SubscribedPaths
	}
	return nil
}

// Metadata for the message
type MessageMeta struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	OriginClient  string                 `protobuf:"bytes,1,opt,name=origin_client,json=originClient,proto3" json:"origin_client,omitempty"` // The client ID originating the sync
	Version       int64                  `protobuf:"varint,2,opt,name=version,proto3" json:"version,omitempty"`                              // Monotonically increasing version
	Timestamp     int64                  `protobuf:"varint,3,opt,name=timestamp,proto3" json:"timestamp,omitempty"`                          // The timestamp (nanoseconds) of the update
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *MessageMeta) Reset() {
	*x = MessageMeta{}
	mi := &file_filesync_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *MessageMeta) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MessageMeta) ProtoMessage() {}

func (x *MessageMeta) ProtoReflect() protoreflect.Message {
	mi := &file_filesync_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MessageMeta.ProtoReflect.Descriptor instead.
func (*MessageMeta) Descriptor() ([]byte, []int) {
	return file_filesync_proto_rawDescGZIP(), []int{2}
}

func (x *MessageMeta) GetOriginClient() string {
	if x != nil {
		return x.OriginClient
	}
	return ""
}

func (x *MessageMeta) GetVersion() int64 {
	if x != nil {
		return x.Version
	}
	return 0
}

func (x *MessageMeta) GetTimestamp() int64 {
	if x != nil {
		return x.Timestamp
	}
	return 0
}

// Represents a file update (new or modified file)
type FileUpdate struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Meta          *MessageMeta           `protobuf:"bytes,1,opt,name=meta,proto3" json:"meta,omitempty"`                                   // Message meta data (common data)
	Path          string                 `protobuf:"bytes,2,opt,name=path,proto3" json:"path,omitempty"`                                   // The file/folder path subject to this update
	Data          []byte                 `protobuf:"bytes,3,opt,name=data,proto3" json:"data,omitempty"`                                   // Raw data (diffs) or just chunks (if the message is too large)
	IsChunk       bool                   `protobuf:"varint,4,opt,name=is_chunk,json=isChunk,proto3" json:"is_chunk,omitempty"`             // If the data contains a chunk
	ChunkIndex    int32                  `protobuf:"varint,5,opt,name=chunk_index,json=chunkIndex,proto3" json:"chunk_index,omitempty"`    // The index of the current chunk
	TotalChunks   int32                  `protobuf:"varint,6,opt,name=total_chunks,json=totalChunks,proto3" json:"total_chunks,omitempty"` // Total number of chunks
	IsFolder      bool                   `protobuf:"varint,7,opt,name=is_folder,json=isFolder,proto3" json:"is_folder,omitempty"`          // If the current path is a folder or a file
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *FileUpdate) Reset() {
	*x = FileUpdate{}
	mi := &file_filesync_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *FileUpdate) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FileUpdate) ProtoMessage() {}

func (x *FileUpdate) ProtoReflect() protoreflect.Message {
	mi := &file_filesync_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FileUpdate.ProtoReflect.Descriptor instead.
func (*FileUpdate) Descriptor() ([]byte, []int) {
	return file_filesync_proto_rawDescGZIP(), []int{3}
}

func (x *FileUpdate) GetMeta() *MessageMeta {
	if x != nil {
		return x.Meta
	}
	return nil
}

func (x *FileUpdate) GetPath() string {
	if x != nil {
		return x.Path
	}
	return ""
}

func (x *FileUpdate) GetData() []byte {
	if x != nil {
		return x.Data
	}
	return nil
}

func (x *FileUpdate) GetIsChunk() bool {
	if x != nil {
		return x.IsChunk
	}
	return false
}

func (x *FileUpdate) GetChunkIndex() int32 {
	if x != nil {
		return x.ChunkIndex
	}
	return 0
}

func (x *FileUpdate) GetTotalChunks() int32 {
	if x != nil {
		return x.TotalChunks
	}
	return 0
}

func (x *FileUpdate) GetIsFolder() bool {
	if x != nil {
		return x.IsFolder
	}
	return false
}

// Represents a move/rename operations for a file or a folder
type FileRename struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Meta          *MessageMeta           `protobuf:"bytes,1,opt,name=meta,proto3" json:"meta,omitempty"`                      // Message meta data (common data)
	Path          string                 `protobuf:"bytes,2,opt,name=path,proto3" json:"path,omitempty"`                      // The file/folder path subject to this update
	OldPath       string                 `protobuf:"bytes,3,opt,name=old_path,json=oldPath,proto3" json:"old_path,omitempty"` // The old path of the current file/folder
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *FileRename) Reset() {
	*x = FileRename{}
	mi := &file_filesync_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *FileRename) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FileRename) ProtoMessage() {}

func (x *FileRename) ProtoReflect() protoreflect.Message {
	mi := &file_filesync_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FileRename.ProtoReflect.Descriptor instead.
func (*FileRename) Descriptor() ([]byte, []int) {
	return file_filesync_proto_rawDescGZIP(), []int{4}
}

func (x *FileRename) GetMeta() *MessageMeta {
	if x != nil {
		return x.Meta
	}
	return nil
}

func (x *FileRename) GetPath() string {
	if x != nil {
		return x.Path
	}
	return ""
}

func (x *FileRename) GetOldPath() string {
	if x != nil {
		return x.OldPath
	}
	return ""
}

// Represents a delete operation on file or a folder
type FileRemove struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Meta          *MessageMeta           `protobuf:"bytes,1,opt,name=meta,proto3" json:"meta,omitempty"` // Message meta data (common data)
	Path          string                 `protobuf:"bytes,2,opt,name=path,proto3" json:"path,omitempty"` // The file/folder path subject to this update
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *FileRemove) Reset() {
	*x = FileRemove{}
	mi := &file_filesync_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *FileRemove) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FileRemove) ProtoMessage() {}

func (x *FileRemove) ProtoReflect() protoreflect.Message {
	mi := &file_filesync_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FileRemove.ProtoReflect.Descriptor instead.
func (*FileRemove) Descriptor() ([]byte, []int) {
	return file_filesync_proto_rawDescGZIP(), []int{5}
}

func (x *FileRemove) GetMeta() *MessageMeta {
	if x != nil {
		return x.Meta
	}
	return nil
}

func (x *FileRemove) GetPath() string {
	if x != nil {
		return x.Path
	}
	return ""
}

// Acknowledgment of the received update
type SyncAck struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Path          string                 `protobuf:"bytes,1,opt,name=path,proto3" json:"path,omitempty"`                               // The path relative to the ackd update
	Timestamp     int64                  `protobuf:"varint,2,opt,name=timestamp,proto3" json:"timestamp,omitempty"`                    // The timestamp of the acknowledgment
	Version       int64                  `protobuf:"varint,3,opt,name=version,proto3" json:"version,omitempty"`                        // The version of the file
	FromClient    string                 `protobuf:"bytes,4,opt,name=from_client,json=fromClient,proto3" json:"from_client,omitempty"` // The client sendind the ack
	ToClient      string                 `protobuf:"bytes,5,opt,name=to_client,json=toClient,proto3" json:"to_client,omitempty"`       // The origin client that sent the update
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SyncAck) Reset() {
	*x = SyncAck{}
	mi := &file_filesync_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SyncAck) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SyncAck) ProtoMessage() {}

func (x *SyncAck) ProtoReflect() protoreflect.Message {
	mi := &file_filesync_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SyncAck.ProtoReflect.Descriptor instead.
func (*SyncAck) Descriptor() ([]byte, []int) {
	return file_filesync_proto_rawDescGZIP(), []int{6}
}

func (x *SyncAck) GetPath() string {
	if x != nil {
		return x.Path
	}
	return ""
}

func (x *SyncAck) GetTimestamp() int64 {
	if x != nil {
		return x.Timestamp
	}
	return 0
}

func (x *SyncAck) GetVersion() int64 {
	if x != nil {
		return x.Version
	}
	return 0
}

func (x *SyncAck) GetFromClient() string {
	if x != nil {
		return x.FromClient
	}
	return ""
}

func (x *SyncAck) GetToClient() string {
	if x != nil {
		return x.ToClient
	}
	return ""
}

var File_filesync_proto protoreflect.FileDescriptor

const file_filesync_proto_rawDesc = "" +
	"\n" +
	"\x0efilesync.proto\x12\bfilesync\"\xfa\x01\n" +
	"\vSyncMessage\x12-\n" +
	"\x05hello\x18\x01 \x01(\v2\x15.filesync.ClientHelloH\x00R\x05hello\x12.\n" +
	"\x06update\x18\x02 \x01(\v2\x14.filesync.FileUpdateH\x00R\x06update\x12.\n" +
	"\x06rename\x18\x03 \x01(\v2\x14.filesync.FileRenameH\x00R\x06rename\x12.\n" +
	"\x06remove\x18\x04 \x01(\v2\x14.filesync.FileRemoveH\x00R\x06remove\x12%\n" +
	"\x03ack\x18\x05 \x01(\v2\x11.filesync.SyncAckH\x00R\x03ackB\x05\n" +
	"\x03msg\"U\n" +
	"\vClientHello\x12\x1b\n" +
	"\tclient_id\x18\x01 \x01(\tR\bclientId\x12)\n" +
	"\x10subscribed_paths\x18\x02 \x03(\tR\x0fsubscribedPaths\"j\n" +
	"\vMessageMeta\x12#\n" +
	"\rorigin_client\x18\x01 \x01(\tR\foriginClient\x12\x18\n" +
	"\aversion\x18\x02 \x01(\x03R\aversion\x12\x1c\n" +
	"\ttimestamp\x18\x03 \x01(\x03R\ttimestamp\"\xdb\x01\n" +
	"\n" +
	"FileUpdate\x12)\n" +
	"\x04meta\x18\x01 \x01(\v2\x15.filesync.MessageMetaR\x04meta\x12\x12\n" +
	"\x04path\x18\x02 \x01(\tR\x04path\x12\x12\n" +
	"\x04data\x18\x03 \x01(\fR\x04data\x12\x19\n" +
	"\bis_chunk\x18\x04 \x01(\bR\aisChunk\x12\x1f\n" +
	"\vchunk_index\x18\x05 \x01(\x05R\n" +
	"chunkIndex\x12!\n" +
	"\ftotal_chunks\x18\x06 \x01(\x05R\vtotalChunks\x12\x1b\n" +
	"\tis_folder\x18\a \x01(\bR\bisFolder\"f\n" +
	"\n" +
	"FileRename\x12)\n" +
	"\x04meta\x18\x01 \x01(\v2\x15.filesync.MessageMetaR\x04meta\x12\x12\n" +
	"\x04path\x18\x02 \x01(\tR\x04path\x12\x19\n" +
	"\bold_path\x18\x03 \x01(\tR\aoldPath\"K\n" +
	"\n" +
	"FileRemove\x12)\n" +
	"\x04meta\x18\x01 \x01(\v2\x15.filesync.MessageMetaR\x04meta\x12\x12\n" +
	"\x04path\x18\x02 \x01(\tR\x04path\"\x93\x01\n" +
	"\aSyncAck\x12\x12\n" +
	"\x04path\x18\x01 \x01(\tR\x04path\x12\x1c\n" +
	"\ttimestamp\x18\x02 \x01(\x03R\ttimestamp\x12\x18\n" +
	"\aversion\x18\x03 \x01(\x03R\aversion\x12\x1f\n" +
	"\vfrom_client\x18\x04 \x01(\tR\n" +
	"fromClient\x12\x1b\n" +
	"\tto_client\x18\x05 \x01(\tR\btoClient2L\n" +
	"\x10FileSynchService\x128\n" +
	"\x04Sync\x12\x15.filesync.SyncMessage\x1a\x15.filesync.SyncMessage(\x010\x01B5Z3github.com/synchme/internal/proto/filesync;filesyncb\x06proto3"

var (
	file_filesync_proto_rawDescOnce sync.Once
	file_filesync_proto_rawDescData []byte
)

func file_filesync_proto_rawDescGZIP() []byte {
	file_filesync_proto_rawDescOnce.Do(func() {
		file_filesync_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_filesync_proto_rawDesc), len(file_filesync_proto_rawDesc)))
	})
	return file_filesync_proto_rawDescData
}

var file_filesync_proto_msgTypes = make([]protoimpl.MessageInfo, 7)
var file_filesync_proto_goTypes = []any{
	(*SyncMessage)(nil), // 0: filesync.SyncMessage
	(*ClientHello)(nil), // 1: filesync.ClientHello
	(*MessageMeta)(nil), // 2: filesync.MessageMeta
	(*FileUpdate)(nil),  // 3: filesync.FileUpdate
	(*FileRename)(nil),  // 4: filesync.FileRename
	(*FileRemove)(nil),  // 5: filesync.FileRemove
	(*SyncAck)(nil),     // 6: filesync.SyncAck
}
var file_filesync_proto_depIdxs = []int32{
	1, // 0: filesync.SyncMessage.hello:type_name -> filesync.ClientHello
	3, // 1: filesync.SyncMessage.update:type_name -> filesync.FileUpdate
	4, // 2: filesync.SyncMessage.rename:type_name -> filesync.FileRename
	5, // 3: filesync.SyncMessage.remove:type_name -> filesync.FileRemove
	6, // 4: filesync.SyncMessage.ack:type_name -> filesync.SyncAck
	2, // 5: filesync.FileUpdate.meta:type_name -> filesync.MessageMeta
	2, // 6: filesync.FileRename.meta:type_name -> filesync.MessageMeta
	2, // 7: filesync.FileRemove.meta:type_name -> filesync.MessageMeta
	0, // 8: filesync.FileSynchService.Sync:input_type -> filesync.SyncMessage
	0, // 9: filesync.FileSynchService.Sync:output_type -> filesync.SyncMessage
	9, // [9:10] is the sub-list for method output_type
	8, // [8:9] is the sub-list for method input_type
	8, // [8:8] is the sub-list for extension type_name
	8, // [8:8] is the sub-list for extension extendee
	0, // [0:8] is the sub-list for field type_name
}

func init() { file_filesync_proto_init() }
func file_filesync_proto_init() {
	if File_filesync_proto != nil {
		return
	}
	file_filesync_proto_msgTypes[0].OneofWrappers = []any{
		(*SyncMessage_Hello)(nil),
		(*SyncMessage_Update)(nil),
		(*SyncMessage_Rename)(nil),
		(*SyncMessage_Remove)(nil),
		(*SyncMessage_Ack)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_filesync_proto_rawDesc), len(file_filesync_proto_rawDesc)),
			NumEnums:      0,
			NumMessages:   7,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_filesync_proto_goTypes,
		DependencyIndexes: file_filesync_proto_depIdxs,
		MessageInfos:      file_filesync_proto_msgTypes,
	}.Build()
	File_filesync_proto = out.File
	file_filesync_proto_goTypes = nil
	file_filesync_proto_depIdxs = nil
}
