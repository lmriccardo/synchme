// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v6.30.2
// source: filesync.proto

package filesync

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	FileSynch_Sync_FullMethodName = "/filesync.FileSynch/Sync"
)

// FileSynchClient is the client API for FileSynch service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// *
// Core Service for File Synchronization
type FileSynchClient interface {
	// Client pushes notification to the server, the server relays to interested clients
	Sync(ctx context.Context, opts ...grpc.CallOption) (grpc.BidiStreamingClient[SyncMessage, SyncMessage], error)
}

type fileSynchClient struct {
	cc grpc.ClientConnInterface
}

func NewFileSynchClient(cc grpc.ClientConnInterface) FileSynchClient {
	return &fileSynchClient{cc}
}

func (c *fileSynchClient) Sync(ctx context.Context, opts ...grpc.CallOption) (grpc.BidiStreamingClient[SyncMessage, SyncMessage], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &FileSynch_ServiceDesc.Streams[0], FileSynch_Sync_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[SyncMessage, SyncMessage]{ClientStream: stream}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type FileSynch_SyncClient = grpc.BidiStreamingClient[SyncMessage, SyncMessage]

// FileSynchServer is the server API for FileSynch service.
// All implementations must embed UnimplementedFileSynchServer
// for forward compatibility.
//
// *
// Core Service for File Synchronization
type FileSynchServer interface {
	// Client pushes notification to the server, the server relays to interested clients
	Sync(grpc.BidiStreamingServer[SyncMessage, SyncMessage]) error
	mustEmbedUnimplementedFileSynchServer()
}

// UnimplementedFileSynchServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedFileSynchServer struct{}

func (UnimplementedFileSynchServer) Sync(grpc.BidiStreamingServer[SyncMessage, SyncMessage]) error {
	return status.Errorf(codes.Unimplemented, "method Sync not implemented")
}
func (UnimplementedFileSynchServer) mustEmbedUnimplementedFileSynchServer() {}
func (UnimplementedFileSynchServer) testEmbeddedByValue()                   {}

// UnsafeFileSynchServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to FileSynchServer will
// result in compilation errors.
type UnsafeFileSynchServer interface {
	mustEmbedUnimplementedFileSynchServer()
}

func RegisterFileSynchServer(s grpc.ServiceRegistrar, srv FileSynchServer) {
	// If the following call pancis, it indicates UnimplementedFileSynchServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&FileSynch_ServiceDesc, srv)
}

func _FileSynch_Sync_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(FileSynchServer).Sync(&grpc.GenericServerStream[SyncMessage, SyncMessage]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type FileSynch_SyncServer = grpc.BidiStreamingServer[SyncMessage, SyncMessage]

// FileSynch_ServiceDesc is the grpc.ServiceDesc for FileSynch service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var FileSynch_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "filesync.FileSynch",
	HandlerType: (*FileSynchServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Sync",
			Handler:       _FileSynch_Sync_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "filesync.proto",
}
