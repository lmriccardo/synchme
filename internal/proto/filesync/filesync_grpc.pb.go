// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v6.30.2
// source: filesync.proto

package filesync

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	FileSynchService_Sync_FullMethodName = "/filesync.FileSynchService/Sync"
)

// FileSynchServiceClient is the client API for FileSynchService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// *
// Core Service for File Synchronization
type FileSynchServiceClient interface {
	// Client pushes notification to the server, the server relays to interested clients
	Sync(ctx context.Context, opts ...grpc.CallOption) (grpc.BidiStreamingClient[SyncMessage, SyncMessage], error)
}

type fileSynchServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewFileSynchServiceClient(cc grpc.ClientConnInterface) FileSynchServiceClient {
	return &fileSynchServiceClient{cc}
}

func (c *fileSynchServiceClient) Sync(ctx context.Context, opts ...grpc.CallOption) (grpc.BidiStreamingClient[SyncMessage, SyncMessage], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &FileSynchService_ServiceDesc.Streams[0], FileSynchService_Sync_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[SyncMessage, SyncMessage]{ClientStream: stream}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type FileSynchService_SyncClient = grpc.BidiStreamingClient[SyncMessage, SyncMessage]

// FileSynchServiceServer is the server API for FileSynchService service.
// All implementations must embed UnimplementedFileSynchServiceServer
// for forward compatibility.
//
// *
// Core Service for File Synchronization
type FileSynchServiceServer interface {
	// Client pushes notification to the server, the server relays to interested clients
	Sync(grpc.BidiStreamingServer[SyncMessage, SyncMessage]) error
	mustEmbedUnimplementedFileSynchServiceServer()
}

// UnimplementedFileSynchServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedFileSynchServiceServer struct{}

func (UnimplementedFileSynchServiceServer) Sync(grpc.BidiStreamingServer[SyncMessage, SyncMessage]) error {
	return status.Errorf(codes.Unimplemented, "method Sync not implemented")
}
func (UnimplementedFileSynchServiceServer) mustEmbedUnimplementedFileSynchServiceServer() {}
func (UnimplementedFileSynchServiceServer) testEmbeddedByValue()                          {}

// UnsafeFileSynchServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to FileSynchServiceServer will
// result in compilation errors.
type UnsafeFileSynchServiceServer interface {
	mustEmbedUnimplementedFileSynchServiceServer()
}

func RegisterFileSynchServiceServer(s grpc.ServiceRegistrar, srv FileSynchServiceServer) {
	// If the following call pancis, it indicates UnimplementedFileSynchServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&FileSynchService_ServiceDesc, srv)
}

func _FileSynchService_Sync_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(FileSynchServiceServer).Sync(&grpc.GenericServerStream[SyncMessage, SyncMessage]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type FileSynchService_SyncServer = grpc.BidiStreamingServer[SyncMessage, SyncMessage]

// FileSynchService_ServiceDesc is the grpc.ServiceDesc for FileSynchService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var FileSynchService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "filesync.FileSynchService",
	HandlerType: (*FileSynchServiceServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Sync",
			Handler:       _FileSynchService_Sync_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "filesync.proto",
}
