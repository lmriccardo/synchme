syntax = "proto3";

package filesync;

option go_package = "github.com/synchme/internal/proto/filesync;filesync";

// -------- Messages ---------

// A generic wrapper for messages in the stream
message SyncMessage {
    MessageMeta meta = 1; // Message meta data (common data)
    oneof msg {
        FileUpdate  update = 2;
        FileRename  rename = 3;
        FileRemove  remove = 4;
        SyncAck     ack    = 5;
    }
}

// Metadata for the message
message MessageMeta {
    string origin_client = 1; // The client ID originating the sync
    int64  version       = 2; // Monotonically increasing version
    int64  timestamp     = 3; // The timestamp (nanoseconds) of the update
    int64  identifier    = 4; // A message identifier (essentially a unique counter)
}

// Represents a file update (new or modified file)
message FileUpdate {
    string      path         = 1; // The file/folder path subject to this update
    bytes       data         = 2; // Raw data (diffs) or just chunks (if the message is too large)
    bool        is_chunk     = 3; // If the data contains a chunk
    int32       chunk_index  = 4; // The index of the current chunk
    int32       total_chunks = 5; // Total number of chunks
    bool        is_folder    = 6; // If the current path is a folder or a file

    enum UpdateType {
        CREATE = 0;
        WRITE  = 1;
    }

    UpdateType type = 7; // The type of the update (CREATE or WRITE)
}

// Represents a move/rename operations for a file or a folder
message FileRename {
    string      path     = 1; // The file/folder path subject to this update
    string      old_path = 2; // The old path of the current file/folder
}

// Represents a delete operation on file or a folder
message FileRemove {
    string path = 1; // The file/folder path subject to this update
}

// Acknowledgment of the received update
message SyncAck {
    string path      = 1; // The path relative to the ackd update
    string to_client = 2; // The origin client that sent the update
}

message PullMessage {
    
}

message PushMessage {

}

/**
 * Core Service for File Synchronization
*/
service FileSynch {
    // Client pushes notification to the server, the server relays to interested clients
    rpc Sync(stream SyncMessage) returns (stream SyncMessage);
    rpc Push()
}